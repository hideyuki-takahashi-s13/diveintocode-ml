{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題1】train_test_splitのスクラッチ\n",
    "スクラッチの練習として、scikit-learnのtrain_test_splitを自作してみます。<br>\n",
    "以下の雛形をベースとして関数を完成させてください。<br>\n",
    "なお、作成した関数がscikit-learnのtrain_test_splitと同じ動作をしているか必ず確認をするようにしましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from decimal import Decimal, ROUND_HALF_UP\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 雛形をベースとして関数を作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scratch_train_test_split(X, y, train_size):\n",
    "    \"\"\"\n",
    "    検証データを分割する。\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    X : 次の形のndarray, shape (n_samples, n_features)\n",
    "      訓練データ\n",
    "    y : 次の形のndarray, shape (n_samples, )\n",
    "      正解値\n",
    "    train_size : float (0<train_size<1)\n",
    "      何割をtrainとするか指定\n",
    "\n",
    "    Returns\n",
    "    ----------\n",
    "    X_train : 次の形のndarray, shape (n_samples, n_features)\n",
    "      訓練データ\n",
    "    X_test : 次の形のndarray, shape (n_samples, n_features)\n",
    "      検証データ\n",
    "    y_train : 次の形のndarray, shape (n_samples, )\n",
    "      訓練データの正解値\n",
    "    y_test : 次の形のndarray, shape (n_samples, )\n",
    "      検証データの正解値\n",
    "    \"\"\"\n",
    "    #ここにコードを書く\n",
    "\n",
    "    # 乱数を初期化\n",
    "    np.random.seed(0)\n",
    "    \n",
    "    #trainデータの数を計算\n",
    "    n_X_train = int(Decimal(str(len(X) * train_size)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))\n",
    "    \n",
    "    #trainデータの数だけランダムにindex番号を抽出\n",
    "    list_index_train = []\n",
    "    for i in np.random.choice((len(X) - 1), n_X_train, replace=False):\n",
    "        list_index_train.append(i)\n",
    "        \n",
    "    #testデータ用のindex番号を抽出\n",
    "    list_index_test = list(set(range(len(X))) - set(list_index_train))\n",
    "    \n",
    "    #index番号からデータを抽出\n",
    "    X_train = X[list_index_train]\n",
    "    X_test = X[list_index_test]\n",
    "    y_train = y[list_index_train]\n",
    "    y_test = y[list_index_test]\n",
    "    \n",
    "    pass\n",
    "    return X_train, X_test, y_train, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[6.8, 2.8, 4.8, 1.4],\n",
       "        [6.3, 3.4, 5.6, 2.4],\n",
       "        [6.9, 3.1, 4.9, 1.5],\n",
       "        [7.6, 3. , 6.6, 2.1],\n",
       "        [7.2, 3.2, 6. , 1.8],\n",
       "        [5.8, 2.7, 5.1, 1.9],\n",
       "        [5.6, 3. , 4.5, 1.5],\n",
       "        [6.3, 2.7, 4.9, 1.8],\n",
       "        [6.5, 3. , 5.8, 2.2],\n",
       "        [6.7, 3.3, 5.7, 2.5],\n",
       "        [6.3, 2.9, 5.6, 1.8],\n",
       "        [6.9, 3.1, 5.1, 2.3],\n",
       "        [6.4, 2.8, 5.6, 2.1],\n",
       "        [6.1, 2.9, 4.7, 1.4],\n",
       "        [4.9, 2.4, 3.3, 1. ],\n",
       "        [5.5, 2.4, 3.8, 1.1],\n",
       "        [6.3, 2.5, 4.9, 1.5],\n",
       "        [6.4, 2.9, 4.3, 1.3],\n",
       "        [6. , 2.7, 5.1, 1.6],\n",
       "        [6.6, 2.9, 4.6, 1.3],\n",
       "        [5. , 2.3, 3.3, 1. ],\n",
       "        [6.8, 3. , 5.5, 2.1],\n",
       "        [5.5, 2.3, 4. , 1.3],\n",
       "        [5.6, 2.8, 4.9, 2. ],\n",
       "        [5.7, 3. , 4.2, 1.2],\n",
       "        [5.1, 2.5, 3. , 1.1],\n",
       "        [6.3, 3.3, 4.7, 1.6],\n",
       "        [6.2, 3.4, 5.4, 2.3],\n",
       "        [6.4, 2.8, 5.6, 2.2],\n",
       "        [6.2, 2.8, 4.8, 1.8],\n",
       "        [6.5, 3.2, 5.1, 2. ],\n",
       "        [7.4, 2.8, 6.1, 1.9],\n",
       "        [6.9, 3.1, 5.4, 2.1],\n",
       "        [7.7, 2.6, 6.9, 2.3],\n",
       "        [5.8, 2.7, 5.1, 1.9],\n",
       "        [6.7, 3. , 5. , 1.7],\n",
       "        [6.2, 2.2, 4.5, 1.5],\n",
       "        [4.9, 2.5, 4.5, 1.7],\n",
       "        [5.7, 2.5, 5. , 2. ],\n",
       "        [6.7, 3.3, 5.7, 2.1],\n",
       "        [6.4, 3.2, 4.5, 1.5],\n",
       "        [6.4, 2.7, 5.3, 1.9],\n",
       "        [5.8, 2.6, 4. , 1.2],\n",
       "        [6.1, 3. , 4.6, 1.4],\n",
       "        [6.5, 2.8, 4.6, 1.5],\n",
       "        [6.7, 3.1, 4.4, 1.4],\n",
       "        [5.8, 2.7, 4.1, 1. ],\n",
       "        [5.5, 2.6, 4.4, 1.2],\n",
       "        [5.6, 3. , 4.1, 1.3],\n",
       "        [5.7, 2.8, 4.5, 1.3],\n",
       "        [6.7, 3.1, 5.6, 2.4],\n",
       "        [7.2, 3.6, 6.1, 2.5],\n",
       "        [7. , 3.2, 4.7, 1.4],\n",
       "        [5.4, 3. , 4.5, 1.5],\n",
       "        [6. , 2.9, 4.5, 1.5],\n",
       "        [6.3, 3.3, 6. , 2.5],\n",
       "        [5.9, 3. , 4.2, 1.5],\n",
       "        [6. , 3.4, 4.5, 1.6],\n",
       "        [6.1, 2.8, 4.7, 1.2],\n",
       "        [7.1, 3. , 5.9, 2.1],\n",
       "        [5. , 2. , 3.5, 1. ],\n",
       "        [5.5, 2.4, 3.7, 1. ],\n",
       "        [6.5, 3. , 5.5, 1.8],\n",
       "        [7.3, 2.9, 6.3, 1.8],\n",
       "        [7.2, 3. , 5.8, 1.6],\n",
       "        [7.7, 3. , 6.1, 2.3],\n",
       "        [5.8, 2.7, 3.9, 1.2],\n",
       "        [6.1, 2.6, 5.6, 1.4],\n",
       "        [5.6, 2.9, 3.6, 1.3],\n",
       "        [6. , 3. , 4.8, 1.8],\n",
       "        [5.6, 2.5, 3.9, 1.1],\n",
       "        [5.7, 2.6, 3.5, 1. ],\n",
       "        [5.7, 2.8, 4.1, 1.3],\n",
       "        [6.3, 2.5, 5. , 1.9],\n",
       "        [6.5, 3. , 5.2, 2. ],\n",
       "        [6. , 2.2, 5. , 1.5],\n",
       "        [5.9, 3.2, 4.8, 1.8],\n",
       "        [6.8, 3.2, 5.9, 2.3],\n",
       "        [7.7, 2.8, 6.7, 2. ],\n",
       "        [6.1, 3. , 4.9, 1.8]]),\n",
       " array([[5.2, 2.7, 3.9, 1.4],\n",
       "        [6. , 2.2, 4. , 1. ],\n",
       "        [6.1, 2.8, 4. , 1.3],\n",
       "        [6.6, 3. , 4.4, 1.4],\n",
       "        [6.7, 3.1, 4.7, 1.5],\n",
       "        [6.3, 2.3, 4.4, 1.3],\n",
       "        [5.5, 2.5, 4. , 1.3],\n",
       "        [5.6, 2.7, 4.2, 1.3],\n",
       "        [5.7, 2.9, 4.2, 1.3],\n",
       "        [6.2, 2.9, 4.3, 1.3],\n",
       "        [6.7, 2.5, 5.8, 1.8],\n",
       "        [5.8, 2.8, 5.1, 2.4],\n",
       "        [6.4, 3.2, 5.3, 2.3],\n",
       "        [7.7, 3.8, 6.7, 2.2],\n",
       "        [6.9, 3.2, 5.7, 2.3],\n",
       "        [7.9, 3.8, 6.4, 2. ],\n",
       "        [6.3, 2.8, 5.1, 1.5],\n",
       "        [6.4, 3.1, 5.5, 1.8],\n",
       "        [6.7, 3. , 5.2, 2.3],\n",
       "        [5.9, 3. , 5.1, 1.8]]),\n",
       " array([1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n",
       "        1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1,\n",
       "        1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2,\n",
       "        1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2]),\n",
       " array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#irisデータセットを取得\n",
    "iris = load_iris()\n",
    "X = pd.DataFrame(iris.data, columns=iris.feature_names) #説明変数\n",
    "y = pd.DataFrame(iris.target, columns=[\"Species\"]) #目的変数\n",
    "df = pd.concat([X, y], axis=1)#説明変数と目的変数を結合\n",
    "df = df.replace({\"Species\": dict(enumerate(iris.target_names))}) #Speciesの要素をtarget_namesに変更\n",
    "df_versicolor_virginica = df.query('Species == [\"versicolor\",  \"virginica\"]')# versicolorとvirginicaを抽出\n",
    "df_versicolor_virginica = df_versicolor_virginica.replace({\"Species\": {'versicolor': 1,  'virginica': 2}})\n",
    "\n",
    "#ndarrayに変換\n",
    "X_nd = np.array(df_versicolor_virginica.iloc[:, :4])\n",
    "y_nd = np.array(df_versicolor_virginica[\"Species\"])\n",
    "\n",
    "#作成した関数を実行\n",
    "scratch_train_test_split(X_nd, y_nd, 0.8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[6. , 3.4, 4.5, 1.6],\n",
       "        [6. , 3. , 4.8, 1.8],\n",
       "        [5.6, 2.5, 3.9, 1.1],\n",
       "        [5.7, 2.6, 3.5, 1. ],\n",
       "        [5.5, 2.4, 3.7, 1. ],\n",
       "        [6.9, 3.1, 5.1, 2.3],\n",
       "        [7.7, 3. , 6.1, 2.3],\n",
       "        [5.2, 2.7, 3.9, 1.4],\n",
       "        [6.3, 2.9, 5.6, 1.8],\n",
       "        [6.1, 3. , 4.6, 1.4],\n",
       "        [6.1, 2.8, 4. , 1.3],\n",
       "        [6.7, 3.1, 5.6, 2.4],\n",
       "        [6. , 2.7, 5.1, 1.6],\n",
       "        [6. , 2.2, 5. , 1.5],\n",
       "        [6.1, 2.6, 5.6, 1.4],\n",
       "        [6.4, 3.1, 5.5, 1.8],\n",
       "        [6.7, 3. , 5.2, 2.3],\n",
       "        [6.5, 3. , 5.2, 2. ],\n",
       "        [6.8, 3. , 5.5, 2.1],\n",
       "        [6. , 2.2, 4. , 1. ],\n",
       "        [5.9, 3.2, 4.8, 1.8],\n",
       "        [6.9, 3.1, 5.4, 2.1],\n",
       "        [6.3, 2.3, 4.4, 1.3],\n",
       "        [7.2, 3.6, 6.1, 2.5],\n",
       "        [6.4, 3.2, 4.5, 1.5],\n",
       "        [6.7, 3.3, 5.7, 2.1],\n",
       "        [5.9, 3. , 4.2, 1.5],\n",
       "        [7.2, 3. , 5.8, 1.6],\n",
       "        [5.6, 2.9, 3.6, 1.3],\n",
       "        [6.5, 3. , 5.8, 2.2],\n",
       "        [5.6, 3. , 4.5, 1.5],\n",
       "        [6.8, 2.8, 4.8, 1.4],\n",
       "        [5.8, 2.7, 5.1, 1.9],\n",
       "        [5.7, 3. , 4.2, 1.2],\n",
       "        [6.3, 3.3, 4.7, 1.6],\n",
       "        [6.2, 3.4, 5.4, 2.3],\n",
       "        [5.5, 2.4, 3.8, 1.1],\n",
       "        [5.6, 2.7, 4.2, 1.3],\n",
       "        [7.7, 2.8, 6.7, 2. ],\n",
       "        [5. , 2.3, 3.3, 1. ],\n",
       "        [6.7, 3.1, 4.4, 1.4],\n",
       "        [6.7, 3.3, 5.7, 2.5],\n",
       "        [6.2, 2.2, 4.5, 1.5],\n",
       "        [6.1, 2.9, 4.7, 1.4],\n",
       "        [6.3, 2.5, 4.9, 1.5],\n",
       "        [5. , 2. , 3.5, 1. ],\n",
       "        [6.7, 2.5, 5.8, 1.8],\n",
       "        [5.6, 2.8, 4.9, 2. ],\n",
       "        [5.8, 2.8, 5.1, 2.4],\n",
       "        [5.5, 2.3, 4. , 1.3],\n",
       "        [5.5, 2.6, 4.4, 1.2],\n",
       "        [5.4, 3. , 4.5, 1.5],\n",
       "        [6.7, 3. , 5. , 1.7],\n",
       "        [7.1, 3. , 5.9, 2.1],\n",
       "        [4.9, 2.4, 3.3, 1. ],\n",
       "        [5.1, 2.5, 3. , 1.1],\n",
       "        [6.4, 2.7, 5.3, 1.9],\n",
       "        [6.8, 3.2, 5.9, 2.3],\n",
       "        [5.9, 3. , 5.1, 1.8],\n",
       "        [5.5, 2.5, 4. , 1.3],\n",
       "        [6.9, 3.1, 4.9, 1.5],\n",
       "        [7.7, 3.8, 6.7, 2.2],\n",
       "        [7.6, 3. , 6.6, 2.1],\n",
       "        [5.7, 2.8, 4.1, 1.3],\n",
       "        [7.7, 2.6, 6.9, 2.3],\n",
       "        [7.4, 2.8, 6.1, 1.9],\n",
       "        [6.7, 3.1, 4.7, 1.5],\n",
       "        [6.4, 2.8, 5.6, 2.1],\n",
       "        [6.3, 2.5, 5. , 1.9],\n",
       "        [6.6, 3. , 4.4, 1.4],\n",
       "        [5.7, 2.9, 4.2, 1.3],\n",
       "        [5.8, 2.7, 3.9, 1.2],\n",
       "        [6.3, 2.7, 4.9, 1.8],\n",
       "        [6.2, 2.9, 4.3, 1.3],\n",
       "        [6.3, 3.4, 5.6, 2.4],\n",
       "        [7.3, 2.9, 6.3, 1.8],\n",
       "        [6.3, 2.8, 5.1, 1.5],\n",
       "        [5.8, 2.7, 4.1, 1. ],\n",
       "        [5.8, 2.7, 5.1, 1.9],\n",
       "        [6.5, 3. , 5.5, 1.8]]),\n",
       " array([[6.6, 2.9, 4.6, 1.3],\n",
       "        [6.9, 3.2, 5.7, 2.3],\n",
       "        [6.4, 2.8, 5.6, 2.2],\n",
       "        [6. , 2.9, 4.5, 1.5],\n",
       "        [5.7, 2.5, 5. , 2. ],\n",
       "        [7. , 3.2, 4.7, 1.4],\n",
       "        [5.7, 2.8, 4.5, 1.3],\n",
       "        [6.3, 3.3, 6. , 2.5],\n",
       "        [7.9, 3.8, 6.4, 2. ],\n",
       "        [6.5, 2.8, 4.6, 1.5],\n",
       "        [6.1, 2.8, 4.7, 1.2],\n",
       "        [6.4, 3.2, 5.3, 2.3],\n",
       "        [6.2, 2.8, 4.8, 1.8],\n",
       "        [6.5, 3.2, 5.1, 2. ],\n",
       "        [6.4, 2.9, 4.3, 1.3],\n",
       "        [5.8, 2.6, 4. , 1.2],\n",
       "        [6.1, 3. , 4.9, 1.8],\n",
       "        [5.6, 3. , 4.1, 1.3],\n",
       "        [4.9, 2.5, 4.5, 1.7],\n",
       "        [7.2, 3.2, 6. , 1.8]]),\n",
       " array([1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2,\n",
       "        1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\n",
       "        1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2,\n",
       "        1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2]),\n",
       " array([1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2]))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# scikit-learnのtrain_test_splitと同じ動作をしているか確認\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_nd, y_nd, test_size=0.20, random_state=123)\n",
    "\n",
    "X_train, X_test, y_train, y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### scikit-learnのtrain_test_splitと同様の動作になっていることを確認。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 分類問題\n",
    "分類は3種類の手法をスクラッチします。<br>\n",
    "- ロジスティック回帰\n",
    "- SVM\n",
    "- 決定木\n",
    "\n",
    "ロジスティック回帰はscikit-learnにおいてLogisticRegressionクラスとSGDClassifierクラスの2種類から使用できます。<br>\n",
    "ここでは勾配降下法を用いて計算するSGDClassifierクラスを利用してください。<br>\n",
    "引数でloss=\"log\"とすることでロジスティック回帰の計算になります。<br>\n",
    "\n",
    "データセットは3種類用意します。<br>\n",
    "1つ目は事前学習期間同様にirisデータセットです。<br>\n",
    "2値分類としたいため、以下の2つの目的変数のみ利用します。特徴量は4種類全て使います。<br>\n",
    "- virgicolorとvirginica\n",
    "\n",
    "残り2つは特徴量が2つのデータセットを人工的に用意します。以下のコードで説明変数X,目的変数yが作成可能です。<br>\n",
    "「シンプルデータセット1」「シンプルデータセット2」とします。特徴量が2つであるため可視化が容易です。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### シンプルデータセット1作成コード"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.random.seed(seed=0)\n",
    "n_samples = 500\n",
    "f0 = [-1, 2]\n",
    "f1 = [2, -1]\n",
    "cov = [[1.0,0.8], [0.8, 1.0]]\n",
    "f0 = np.random.multivariate_normal(f0, cov, int(n_samples/2))\n",
    "f1 = np.random.multivariate_normal(f1, cov, int(n_samples/2))\n",
    "X = np.concatenate((f0, f1))\n",
    "y = np.concatenate((np.ones((int(n_samples/2))), np.ones((int(n_samples/2))) *(-1))).astype(np.int)\n",
    "random_index = np.random.permutation(np.arange(n_samples))\n",
    "X_sim1 = X[random_index]\n",
    "y_sim1 = y[random_index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### シンプルデータセット2作成コード"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_sim2 = np.array([[-0.44699 , -2.8073  ],[-1.4621  , -2.4586  ],\n",
    "       [ 0.10645 ,  1.9242  ],[-3.5944  , -4.0112  ],\n",
    "       [-0.9888  ,  4.5718  ],[-3.1625  , -3.9606  ],\n",
    "       [ 0.56421 ,  0.72888 ],[-0.60216 ,  8.4636  ],\n",
    "       [-0.61251 , -0.75345 ],[-0.73535 , -2.2718  ],\n",
    "       [-0.80647 , -2.2135  ],[ 0.86291 ,  2.3946  ],\n",
    "       [-3.1108  ,  0.15394 ],[-2.9362  ,  2.5462  ],\n",
    "       [-0.57242 , -2.9915  ],[ 1.4771  ,  3.4896  ],\n",
    "       [ 0.58619 ,  0.37158 ],[ 0.6017  ,  4.3439  ],\n",
    "       [-2.1086  ,  8.3428  ],[-4.1013  , -4.353   ],\n",
    "       [-1.9948  , -1.3927  ],[ 0.35084 , -0.031994],\n",
    "       [ 0.96765 ,  7.8929  ],[-1.281   , 15.6824  ],\n",
    "       [ 0.96765 , 10.083   ],[ 1.3763  ,  1.3347  ],\n",
    "       [-2.234   , -2.5323  ],[-2.9452  , -1.8219  ],\n",
    "       [ 0.14654 , -0.28733 ],[ 0.5461  ,  5.8245  ],\n",
    "       [-0.65259 ,  9.3444  ],[ 0.59912 ,  5.3524  ],\n",
    "       [ 0.50214 , -0.31818 ],[-3.0603  , -3.6461  ],\n",
    "       [-6.6797  ,  0.67661 ],[-2.353   , -0.72261 ],\n",
    "       [ 1.1319  ,  2.4023  ],[-0.12243 ,  9.0162  ],\n",
    "       [-2.5677  , 13.1779  ],[ 0.057313,  5.4681  ]])\n",
    "y_sim2 = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
    "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題2】 分類問題を解くコードの作成\n",
    "上記3種類の手法で3種類のデータセットを学習・推定するコードを作成してください。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ロジスティック回帰"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#2値分類用　グラフ化の関数（説明変数２個のみ対応）\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import ListedColormap\n",
    "import matplotlib.patches as mpatches\n",
    "def decision_region(X, y, clf,  target_names, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel'):\n",
    "    # setting\n",
    "    scatter_color = ['red', 'blue']\n",
    "    contourf_color = ['pink', 'skyblue']\n",
    "    n_class = 2\n",
    "    # pred\n",
    "    mesh_f0, mesh_f1  = np.meshgrid(np.arange(np.min(X[:,0])-0.5, np.max(X[:,0])+0.5, step), np.arange(np.min(X[:,1])-0.5, np.max(X[:,1])+0.5, step))\n",
    "    mesh = np.c_[np.ravel(mesh_f0),np.ravel(mesh_f1)]\n",
    "    y_pred = clf.predict(mesh).reshape(mesh_f0.shape)\n",
    "    # plot\n",
    "    plt.title(title)\n",
    "    plt.xlabel(xlabel)\n",
    "    plt.ylabel(ylabel)\n",
    "    plt.contourf(mesh_f0, mesh_f1, y_pred, n_class-1, cmap=ListedColormap(contourf_color))\n",
    "    plt.contour(mesh_f0, mesh_f1, y_pred, n_class-1, colors='y', linewidths=3, alpha=0.5)\n",
    "    for i, target in enumerate(set(y)):\n",
    "        plt.scatter(X[y==target][:, 0], X[y==target][:, 1], s=80, color=scatter_color[i], label=target_names[i], marker='o')\n",
    "    patches = [mpatches.Patch(color=scatter_color[i], label=target_names[i]) for i in range(n_class)]\n",
    "    plt.legend(handles=patches)\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#分類問題用　学習から検証までを関数化\n",
    "def classification_func(X, y, train_size, model_criteria):\n",
    "    # 訓練データと検証データの分割。訓練データ75%、検証データ25%として分割する。\n",
    "    X_train, X_test, y_train, y_test = scratch_train_test_split(X, y, train_size)\n",
    "    \n",
    "    #標準化\n",
    "    scaler = StandardScaler()\n",
    "    scaler.fit(X_train) #訓練用のデータでfit\n",
    "    X_train_std = scaler.transform(X_train) #訓練用データをtransform\n",
    "    X_test_std = scaler.transform(X_test) #検証用データをtransform\n",
    "\n",
    "    #学習〜予測\n",
    "    clf = model_criteria\n",
    "    clf.fit(X_train_std, y_train) # 学習\n",
    "    pred = clf.predict(X_test_std) #クラスの予測\n",
    "    \n",
    "    # 評価\n",
    "    print(\"正解率：{:.2f}\".format(accuracy_score(y_test, pred)))\n",
    "    print(\"適合率：{:.2f}\".format(precision_score(y_test, pred, pos_label=1)))\n",
    "    print(\"再現率：{:.2f}\".format(recall_score(y_test, pred, pos_label=1)))\n",
    "    print(\"F値：{:.2f}\".format(f1_score(y_test, pred, pos_label=1)))\n",
    "    print(\"混同行列：\")\n",
    "    print(confusion_matrix(y_test, pred))\n",
    "    print(\"classification_report：\") #評価をまとめて出力するやつ\n",
    "    print(classification_report(y_test, pred))\n",
    "    \n",
    "    return X_test_std, y_test, clf\n",
    "    \n",
    "#     #分布プロット\n",
    "#     df_X = pd.DataFrame(X)\n",
    "#     df_y = pd.DataFrame(y)\n",
    "#     df_y.columns = [\"class\"]\n",
    "#     df_con = pd.concat([df_X, df_y], axis=1)\n",
    "#     sns.pairplot(df_con, hue=\"class\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.88\n",
      "適合率：0.83\n",
      "再現率：0.91\n",
      "F値：0.87\n",
      "混同行列：\n",
      "[[10  1]\n",
      " [ 2 12]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.83      0.91      0.87        11\n",
      "           2       0.92      0.86      0.89        14\n",
      "\n",
      "    accuracy                           0.88        25\n",
      "   macro avg       0.88      0.88      0.88        25\n",
      "weighted avg       0.88      0.88      0.88        25\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#irisデータセット\n",
    "iris = load_iris()\n",
    "X = pd.DataFrame(iris.data, columns=iris.feature_names) #説明変数\n",
    "y = pd.DataFrame(iris.target, columns=[\"Species\"]) #目的変数\n",
    "df = pd.concat([X, y], axis=1)#説明変数と目的変数を結合\n",
    "df = df.replace({\"Species\": dict(enumerate(iris.target_names))}) #Speciesの要素をtarget_namesに変更\n",
    "df_versicolor_virginica = df.query('Species == [\"versicolor\",  \"virginica\"]')# versicolorとvirginicaを抽出\n",
    "df_versicolor_virginica = df_versicolor_virginica.replace({\"Species\": {'versicolor': 1,  'virginica': 2}})\n",
    "\n",
    "#ndarrayに変換\n",
    "X_data = np.array(df_versicolor_virginica.iloc[:, :4])\n",
    "y_data = np.array(df_versicolor_virginica[\"Species\"])\n",
    "\n",
    "model_criteria = SGDClassifier(loss=\"log\")\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：1.00\n",
      "適合率：1.00\n",
      "再現率：1.00\n",
      "F値：1.00\n",
      "混同行列：\n",
      "[[64  0]\n",
      " [ 0 61]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       1.00      1.00      1.00        64\n",
      "           1       1.00      1.00      1.00        61\n",
      "\n",
      "    accuracy                           1.00       125\n",
      "   macro avg       1.00      1.00      1.00       125\n",
      "weighted avg       1.00      1.00      1.00       125\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット1\n",
    "X_data = X_sim1\n",
    "y_data = y_sim1\n",
    "\n",
    "model_criteria = SGDClassifier(loss=\"log\")\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[-1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.70\n",
      "適合率：0.67\n",
      "再現率：0.80\n",
      "F値：0.73\n",
      "混同行列：\n",
      "[[3 2]\n",
      " [1 4]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.60      0.67         5\n",
      "           1       0.67      0.80      0.73         5\n",
      "\n",
      "    accuracy                           0.70        10\n",
      "   macro avg       0.71      0.70      0.70        10\n",
      "weighted avg       0.71      0.70      0.70        10\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット2\n",
    "X_data = X_sim2\n",
    "y_data = y_sim2\n",
    "\n",
    "model_criteria = SGDClassifier(loss=\"log\")\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.92\n",
      "適合率：0.85\n",
      "再現率：1.00\n",
      "F値：0.92\n",
      "混同行列：\n",
      "[[11  0]\n",
      " [ 2 12]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.85      1.00      0.92        11\n",
      "           2       1.00      0.86      0.92        14\n",
      "\n",
      "    accuracy                           0.92        25\n",
      "   macro avg       0.92      0.93      0.92        25\n",
      "weighted avg       0.93      0.92      0.92        25\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#irisデータセット\n",
    "X_data = np.array(df_versicolor_virginica.iloc[:, :4])\n",
    "y_data = np.array(df_versicolor_virginica[\"Species\"])\n",
    "\n",
    "model_criteria = SVC()\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：1.00\n",
      "適合率：1.00\n",
      "再現率：1.00\n",
      "F値：1.00\n",
      "混同行列：\n",
      "[[64  0]\n",
      " [ 0 61]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       1.00      1.00      1.00        64\n",
      "           1       1.00      1.00      1.00        61\n",
      "\n",
      "    accuracy                           1.00       125\n",
      "   macro avg       1.00      1.00      1.00       125\n",
      "weighted avg       1.00      1.00      1.00       125\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット1\n",
    "X_data = X_sim1\n",
    "y_data = y_sim1\n",
    "\n",
    "model_criteria = SVC()\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[-1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.60\n",
      "適合率：0.60\n",
      "再現率：0.60\n",
      "F値：0.60\n",
      "混同行列：\n",
      "[[3 2]\n",
      " [2 3]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.60      0.60      0.60         5\n",
      "           1       0.60      0.60      0.60         5\n",
      "\n",
      "    accuracy                           0.60        10\n",
      "   macro avg       0.60      0.60      0.60        10\n",
      "weighted avg       0.60      0.60      0.60        10\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット2\n",
    "X_data = X_sim2\n",
    "y_data = y_sim2\n",
    "\n",
    "model_criteria = SVC()\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 決定木"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.88\n",
      "適合率：0.83\n",
      "再現率：0.91\n",
      "F値：0.87\n",
      "混同行列：\n",
      "[[10  1]\n",
      " [ 2 12]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.83      0.91      0.87        11\n",
      "           2       0.92      0.86      0.89        14\n",
      "\n",
      "    accuracy                           0.88        25\n",
      "   macro avg       0.88      0.88      0.88        25\n",
      "weighted avg       0.88      0.88      0.88        25\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#irisデータセット\n",
    "X_data = np.array(df_versicolor_virginica.iloc[:, :4])\n",
    "y_data = np.array(df_versicolor_virginica[\"Species\"])\n",
    "\n",
    "model_criteria = DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：1.00\n",
      "適合率：1.00\n",
      "再現率：1.00\n",
      "F値：1.00\n",
      "混同行列：\n",
      "[[64  0]\n",
      " [ 0 61]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       1.00      1.00      1.00        64\n",
      "           1       1.00      1.00      1.00        61\n",
      "\n",
      "    accuracy                           1.00       125\n",
      "   macro avg       1.00      1.00      1.00       125\n",
      "weighted avg       1.00      1.00      1.00       125\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット1\n",
    "X_data = X_sim1\n",
    "y_data = y_sim1\n",
    "\n",
    "model_criteria = DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[-1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "正解率：0.80\n",
      "適合率：0.80\n",
      "再現率：0.80\n",
      "F値：0.80\n",
      "混同行列：\n",
      "[[4 1]\n",
      " [1 4]]\n",
      "classification_report：\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.80      0.80         5\n",
      "           1       0.80      0.80      0.80         5\n",
      "\n",
      "    accuracy                           0.80        10\n",
      "   macro avg       0.80      0.80      0.80        10\n",
      "weighted avg       0.80      0.80      0.80        10\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#シンプルデータセット2\n",
    "X_data = X_sim2\n",
    "y_data = y_sim2\n",
    "\n",
    "model_criteria = DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "X_test_std, y_test , clf = classification_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行\n",
    "decision_region(X_test_std, y_test, clf, step=0.01, title='decision region', xlabel='xlabel', ylabel='ylabel', target_names=[0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 回帰問題\n",
    "回帰は1種類をスクラッチします。<br>\n",
    "- 線形回帰\n",
    "\n",
    "線形回帰は勾配降下法を用いて計算するSGDRegressorクラスを利用してください。<br>\n",
    "データセットは事前学習期間同様にHouse Pricesコンペティションのものを使います。<br>\n",
    "train.csvをダウンロードし、目的変数としてSalePrice、説明変数として、GrLivAreaとYearBuiltを使います。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題3】 回帰問題を解くコードの作成\n",
    "線形回帰でHouse Pricesデータセットを学習・推定するコードを作成してください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#回帰問題用　学習から検証までを関数化\n",
    "def regression_func(X, y, train_size, model_criteria):\n",
    "    # 訓練データと検証データの分割。訓練データ75%、検証データ25%として分割する。\n",
    "    X_train, X_test, y_train, y_test = scratch_train_test_split(X, y, train_size)\n",
    "    \n",
    "    #標準化\n",
    "    scaler = StandardScaler()\n",
    "    scaler.fit(X_train) #訓練用のデータでfit\n",
    "    X_train_std = scaler.transform(X_train) #訓練用データをtransform\n",
    "    X_test_std = scaler.transform(X_test) #検証用データをtransform\n",
    "\n",
    "    #学習〜予測\n",
    "    clf = model_criteria\n",
    "    clf.fit(X_train_std, y_train) # 学習\n",
    "    pred = clf.predict(X_test_std) #クラスの予測\n",
    "\n",
    "    #検証データと予測結果の平均二乗誤差\n",
    "    print(\"平均絶対誤差（MAE）：{:.2f}\".format(mean_absolute_error(y_test, pred)))\n",
    "    print(\"平均二乗誤差（MSE）：{:.2f}\".format(mean_squared_error(y_test, pred)))\n",
    "    print(\"二乗平均平方根誤差（RMSE）：{:.2f}\".format(np.sqrt(mean_squared_error(y_test, pred))))\n",
    "    print(\"決定係数（R^2）：{:.2f}\".format(r2_score(y_test, pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "平均絶対誤差（MAE）：30897.30\n",
      "平均二乗誤差（MSE）：2290087356.86\n",
      "二乗平均平方根誤差（RMSE）：47854.86\n",
      "決定係数（R^2）：0.50\n"
     ]
    }
   ],
   "source": [
    "# House Pricesデータセットを取得\n",
    "df = pd.read_csv(\"/Users/takahashihideyuki/dive/diveintocode-ml/Week4/train.csv\", encoding=\"utf-8\")\n",
    "X = df[[\"GrLivArea\", \"YearBuilt\"]] #説明変数を抽出\n",
    "y = df[\"SalePrice\"] #目的変数を抜き出し抽出\n",
    "\n",
    "X_data = np.array(X)\n",
    "y_data = np.array(y)\n",
    "\n",
    "model_criteria = SGDRegressor()\n",
    "\n",
    "regression_func(X_data, y_data, 0.75, model_criteria) #学習から検証までを関数で実行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
